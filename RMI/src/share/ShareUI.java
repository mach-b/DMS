package share;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import peerNode.Leader;
import peerNode.LeaderElector;

/**
 * The UI for sharing files between two or more applications over a local network
 * 
 * @author Kerry Powell
 * @version 1.0
 */
public class ShareUI extends javax.swing.JFrame implements ActionListener {
    
    final private JFileChooser fc = new JFileChooser();
    final private SharedFiles sharedFiles;
    final private Timer timer = new Timer(10000, this);
    final private Leader leader;

    /**
     * Creates new form ShareUI
     */
    public ShareUI() throws RemoteException {
        
        initComponents();
        sharedFiles = new SharedFiles();
        leader = new PeerNode.getLeader();
    }
    
    /**
     * Updates the local files list
     * 
     * @param files the file names of all the files to set
     */
    private void updateFileListLocal(String[] files) {
        
        DefaultListModel model = new DefaultListModel();
        for (String file: files)
            model.addElement(file);
        fileListLocal.setModel(model);
    }
    
    /**
     * Update the remote files table
     * 
     * @param files the IP addresses and file names of all the files to set
     */
    public void updateFileListRemote(String[][] files) {
        
        String[] columnNames = {"IP", "Files Name"};
        DefaultTableModel model = new DefaultTableModel(files, columnNames);
        tblRemoteFiles.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLoadFile = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileListLocal = new javax.swing.JList();
        btnSaveFile = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRemoteFiles = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnLoadFile.setText("Upload File");
        btnLoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadFileActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(fileListLocal);

        btnSaveFile.setText("Download File");
        btnSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveFileActionPerformed(evt);
            }
        });

        jLabel1.setText("  Local Files");

        jLabel2.setText("  Remote Files");
        jLabel2.setToolTipText("");

        tblRemoteFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IP Address", "File Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblRemoteFiles);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoadFile))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSaveFile)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadFile)
                    .addComponent(btnSaveFile))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When the 'Upload File' button is clicked the user is presented with a file
     * chooser dialog to select a file to upload to add to the shared files
     * 
     * @param evt the event that triggered the method
     */
    private void btnLoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadFileActionPerformed
        
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            
            File file = fc.getSelectedFile();
            if (sharedFiles.addFile(file)) {
                
                System.out.println("File added:" + file.getName());
                updateFileListLocal(sharedFiles.getFileNames());
                //tell the leader the list has changed
            } else {
                
                System.out.println("File not added");
            }
        } 
    }//GEN-LAST:event_btnLoadFileActionPerformed

    /**
     * When the 'Download File' button is clicked the app will then download the
     * file to the RMIFileExchangeFolder
     * 
     * @param evt 
     */
    private void btnSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveFileActionPerformed
        
        String[] selection = getCurrentRemoteSelection();
        if (selection != null) {
            
            String ip = selection[0];
            String fileName = selection[1];
            try {
                
                File file = SharedFiles.getRemoteFile(ip, fileName);
                saveFile(file);
            } catch (RemoteException ex) {
                
                downloadWarning("Failed to connect to remote host:\n\n" + ex.getMessage());
            } catch (NotBoundException ex) {
                
                downloadWarning("Failed to get remote files:\n\n" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnSaveFileActionPerformed

    /**
     * Display a warning dialog box to the user
     * 
     * @param message the message to be displayed
     */
    private void downloadWarning(String message) {
        JOptionPane.showMessageDialog(this,
                message,
                "Download warning",
                JOptionPane.WARNING_MESSAGE);
    }
    
    /**
     * Get the current selection form the remote selection list
     * 
     * @return string array where result[0] = ip and result[1] = file name
     */
    private synchronized String[] getCurrentRemoteSelection() {
        
        String[] selection = null;
        int rowIndex = tblRemoteFiles.getSelectedRow();
        if (rowIndex != -1) {
            
            TableModel model = tblRemoteFiles.getModel();
            if (model.getRowCount() < rowIndex) {
                
                selection = new String[2];
                selection[0] = (String)model.getValueAt(rowIndex, 0);
                selection[1] = (String)model.getValueAt(rowIndex, 1);
            } else {
                
                downloadWarning("Selected file no longer available");
            }
            
        } else {
            downloadWarning("No file has been seleced to download");
        }
        return selection;
    }
    
    /**
     * Save a file to RMIFileExchangeFolder, check if file was not void and alerts
     * user if file already exists
     * 
     * @param file to be saved
     */
    private void saveFile(File file) {
        
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShareUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShareUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShareUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShareUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                try {
                    new ShareUI().setVisible(true);
                } catch (RemoteException ex) {
                    
                    System.err.println(ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoadFile;
    private javax.swing.JButton btnSaveFile;
    private javax.swing.JList fileListLocal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblRemoteFiles;
    // End of variables declaration//GEN-END:variables

    @Override
    public synchronized void actionPerformed(ActionEvent e) {
        
        String[][] remoteList = sharedFiles.getAllRemoteFiles(null);
        if (remoteList != null) {
            updateFileListRemote(remoteList);
        }
    }
}
